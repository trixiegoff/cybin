-- include cylibs
require('clodule').load()
require('utils').load()

-- additive synth
function Adsynth(e)
  e=DC(e) or {}
  e.oscs=e.oscs or {}
  e.freq=e.freq or 440
  e.amp=e.amp or 1
  e.env=Env{vals={0,1,1,0},durs={0.001,2,0.001}}
  for i=1,23 do e.oscs[#e.oscs+1]=Osc{
      freq=i*e.freq+math.sin(i*23.173)*e.freq/45,
      amp=e.amp*0.5/i} end
  e.done=false
  return function(p)
    if type(p)=='table' then return DC(p,e) end
    local out=0
    for i=1,#e.oscs do out=out+e.oscs[i]()*(math.cos(i*math.pi*2/80+cybin.time*math.pow(math.mod(e.freq,7.311),2))+1) end
    out=out*e.env()*e.amp
    e.done=e.env{}.done
    return out
  end
end

-- util for managing voices
p=Poly()
-- trigger events periodically
t=Trigger()

-- generate audio
local lastSample=0
function __process()
  t(math.mod(cybin.time*0.5,1),function()
      local freq=math.pow(2,math.mod(math.floor(cybin.time/2)*5,12)/12)*50
      p(Adsynth{freq=freq,amp=1})
  end);
  local out=p()
  out=math.atan(out*1)
  out=out*0.5
  --- simple crossover filter ---
  local coef=0.5+math.sin(cybin.time*2.5+math.pi/8)*0.499
  local lows=out
  lows=lows*coef+(1-coef)*lastSample
  local highs=out-lows
  lastSample=lows
  --- neat little distortion pipeline ---
  out=math.atan(highs*10)+math.atan(lows*10)
  out=math.atan(out*5)/10
  return out,out
end
