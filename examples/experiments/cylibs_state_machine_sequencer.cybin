-- include cylibs
require('ugen')
require('clodule').load()
require('utils').load()

--------------------------------------------------------------
-------------- Helpful classes / functions -------------------
--------------------------------------------------------------

-- returns a function that steps through values of a sequence when called
function Seq(e)
  e=DC(e) or {}
  e.index=1
  return function()
    while e.index<1 do e.index=e.index+#e end
    while e.index>#e do e.index=e.index-#e end
    local ret=e[e.index]
    e.index=e.index+1
    return ret
  end
end

-- a finite state machine for transitioning between musical structures
function StateMachine(e)
  e=DC(e) or {}
  e.states=e.states or {}
  e.transitions=e.transitions or {}
  return function(a,b)
    if type(a)=='table' and b==nil then return DC(a,e) end
    if type(a)=='string' and b==nil then e.state=a end
    if type(a)=='string' and type(b)=='function' then
      if e.state==nil then e.state=a end
      e.states[a]=b
      return e
    end
    if type(a)=='string' and type(b)=='string' then
      if type(e.transitions[a])~='table' then
	e.transitions[a]={iterator=Counter()}
      end
      e.transitions[a][#e.transitions[a]+1]=b
      return e
    end
    if a==nil and b==nil then
      local func=e.states[e.state]
      local transitions=e.transitions[e.state]
      if transitions~=nil then
	e.state=transitions[math.mod(transitions.iterator(),#transitions)+1] or e.state
      end
      if type(func)=='function' then return func() else return nil end
    end
  end
end

--------------------------------------------------------------
------------------- Let's make a music! ----------------------
--------------------------------------------------------------

-- instantiate our effects, instruments, and scheduler
s=Scheduler{delta=1.3/cybin.samplerate}
p=Poly{}
q=Poly{}
comp=Compressor{threshold=-7,attack=0.001,release=0.003,ratio=1.1}
verb=Reverb2{nodes=17}
mcomp=Compressor{threshold=-5,attack=0.03,release=0.07,ratio=2}
mlim=Compressor{threshold=-3,attack=1/100000,release=10,ratio=100}

-- instantiate our state machine
sm=StateMachine{}

-- build our sequences
kSeq=Seq{1,0.25,0.5,0.5,0.25,0.5}
nSeq=(function() local i=-1; return function() i=i+1; return math.mod(i*5,12) end end)()
cuSeq=Seq{0.5,1.75,0.75,0.5,1.25,0.5,2}
cdSeq=Seq{0.25}
rollSeq=Seq{0.75,0.25,0.5,0.125,0.5}
rSeq2=Seq{8,4,2,4,12,4}
fmnoteSeq=Seq{4/3,3,4/5,2/3,5,3/2,2,3/4}

-- some helper functions to generate events
function crawlup(divs,time)
  for i=1,8,8/divs do s{event={time=s{}.time+(i-1)*time/8,func=function() p(Voice{mfreq=456*i,mamp=400*i,env=Env{durs={0.005,0.005*i}}}) end}} end
end
function crawldown(divs,time)
  for i=1,8,8/divs do
    s{event={time=s{}.time+(i-1)*time/8,func=function() local i=8-i; p(Voice{mfreq=456*i,mamp=400*i,env=Env{durs={0.005,0.005*i}}}) end}}
  end
end
function kick(click,decay)
  click=math.max(math.min(click or 0.6,1),0)
  decay=decay or 0.35
  q(Voice{env=Env{durs={0.02/math.max(1,click*5),decay}},mfreq=0,freq=Env{vals={4000,300,50},durs={0.0001+(click or 1)*0.0035,0.025}}})
end
function snare()
  q(Voice{
      env=Env{vals={0,0.8,0},durs={0.005,0.1}},
      mfreq=Env{vals={0,30000,100},durs={0.02,0.1}},
      freq=Env{vals={100,2458,200},durs={0.001,0.01}},
      mamp=Env{vals={40,6000,0},durs={0.005,0.3}}
  })
end
function hat(pitch,decay,amp)
  p(Voice{
      env=Env{vals={0,amp or 0.2,0},durs={0.005,decay or 0.05}},
      mfreq=15928,
      freq=12323*(pitch or 1),
      mamp=5000
  })
end
function hats(space,dur)
  local i=0
  while i+0.001<dur
  do s{event=
	 {time=s{}.time+i,
	  func=function(t)
	    hat(
	      math.cos(math.mod(t,1)*math.pi)*0.005+1.02,
	      math.pow(math.mod(t,0.75)/0.75,1.5)*0.08,
	      math.mod(t,1.25)/1.25*0.05+0.15)
      end}};
    i=i+space
  end
end
function fmnote(note)
  local freq=440*math.pow(2,(note-60+3)/12)
  p(Voice{freq=Env{vals={0,freq},durs={1}},mfreq=freq*fmnoteSeq(),mamp=Env{vals={0,600,0},durs={2,5}},env=Env{vals={0,1/4,0},durs={0.5,8}}})
end
function bignote(note)
  fmnote(note+(math.random()-0.5)*0.1)
end
function roll(divs,dur)
  for i=1,divs do s{event={time=s{}.time+i*dur/divs,func=function(t) kick(i/divs,0.15) end}} end
end
function pong(divs,dur,coef)
  local offset=1*dur
  for i=1,divs do
    p{event={time=s{}.time+offset,func=function(t) kick(math.cos(t*math.pi*4)*0.5+0.5,0.15) end}}
    offset=offset*coef
  end
end

-- let's build our states
sm('a',function(t) local s=kSeq();
     if s>0.9 then
       bignote(nSeq()+20)
     end
     kick()
     hats(s/4,s)
     return s
end)
sm('b',function(t) local s=cuSeq(); crawlup(s*10,s) return s end)
sm('c',function(t) local s=cdSeq(); crawldown(4,s) return s end)
sm('d',function(t) local s=rollSeq(); roll(math.floor(rSeq2()*s),s) return s end)
sm('e',function(t) pong(6,0.75,0.8) return 0.75 end)
sm('f',function(t) snare(); hats(1/4,0.5) return 0.5 end)

-- building the state graph
sm('a','f')
sm('a','f')
sm('a','f')
sm('b','d')
sm('f','a')
sm('f','a')
sm('f','a')
sm('f','a')
sm('f','d')
sm('f','b')
sm('f','d')
sm('f','c')
sm('c','f')
sm('f','c')
sm('c','f')
sm('d','a')

-- handling transitions between states/events
function nextEvent(t)
  local nextTime=sm()
  if nextTime~=nil then
    s{event={time=nextTime+t,func=nextEvent}}
  end
end
nextEvent(0)

-- sample processing loop
function __process()
  s()
  local o=q() or 0
  o=comp(p(),o)+o*1.8
  o=mlim(mcomp((verb(o)/12+o)))*0.5
  return o,o
end
