-- include cylibs
require('ugen')
require('clodule').load()
Melody=require('melody')
Melody.load()
require('utils').load()
require('pattern').load()

edo=53
baseFreq=55/2
chord=Chord({edo=edo,quality=0})
r=Reverb2{coef=0.8,nodes=11}
lastPitch=nil
cindexA=nil

stime=(cybin.time or 0)
function __process()
  cybin.time=cybin.time-stime
  poly=poly or Poly{};trig=trig or Trigger{};arpt=arpt or Trigger{};chordt=chordt or Trigger{};basst=basst or Trigger{}
  trig(math.fmod(cybin.time,1),function()
    if P.GenBjork(5,10)[cybin.time]==1 then
      cindexA=(cindexA or 0)+1
      local c=chord()
      local xform=P('DD S I SUU ^')[cindexA]
      chord=chord(xform)
      print(chord{}.pitch,chord{}.inverseThird,chord{}.quality)
    end
  end)
  arpt(math.fmod(cybin.time,1/8),function()
    if P.GenBjork(10,18)[cybin.time*8]==1 then
      local chord=chord()
      local targetPitch=Freq2Pitch(800,baseFreq,edo)
      lastPitch=Index2Pitch(P('5 -1 -2')[cybin.time*4]+Pitch2Index(math.min(lastPitch or targetPitch,targetPitch),chord,edo),chord,edo)
      local freq=Pitch2Freq(lastPitch,baseFreq,edo)
      poly(Voice{freq=freq,env=Env{durs={0.003,0.08}}})
    end
  end)
  chordt(math.fmod(cybin.time+1,1/8),function()
    for k,v in ipairs(chord()) do
      local pitch=Index2Pitch(math.floor(math.fmod(cybin.time+1-3/8,20/8))*0+Pitch2Index(Freq2Pitch(850,baseFreq,edo),{v},edo),{v},edo)
      if P.GenBjork(4,18)[cybin.time*8]==1 then
        poly(Voice{env=Env{durs={0.02,0.1},vals={0,3/5,0}},mamp=420,freq=math.pow(2,pitch/edo)*baseFreq/4})
      end
    end
  end)
  basst(math.fmod(cybin.time+1,1/8),function()
    local v=chord()[2]
    local pitch=Index2Pitch(math.floor(math.fmod(cybin.time+1-3/8,20/8))*0+Pitch2Index(Freq2Pitch(250,baseFreq,edo),{v},edo),{v},edo)
    if P.GenBjork(4,7)[cybin.time*8]==1 then
      poly(Voice{env=Env{durs={0.02,0.15},vals={0,1,0}},mamp=250,freq=math.pow(2,pitch/edo)*baseFreq/4})
    end
  end)
  local out=(poly() or 0)*0.3
  out=r(out)+out
  out=out*0.3
  return out,out
end

function FindTransformation(startingChord,targetNotes,transformations,maxDepth)
  local possibleTransforms={};for k,v in ipairs(transformations) do table.insert(possibleTransforms,1,v) end
  local function buildTransforms(currentTransforms,depth)
    local newTransforms={}
    for k,prefix in ipairs(currentTransforms) do
      for k,suffix in ipairs(transformations) do
        newTransforms[#newTransforms+1]=prefix..suffix
      end
    end
    for k,v in ipairs(newTransforms) do table.insert(possibleTransforms,1,v) end
    if depth>2 then buildTransforms(newTransforms,depth-1) end
  end
  if maxDepth>1 then buildTransforms(possibleTransforms,maxDepth) end
  local ret={}
  for _,v in ipairs(possibleTransforms) do
    local newChord=startingChord(v)
    local eq=true
    for k,n in ipairs(newChord()) do
      if targetNotes[k]~=n then eq=false end
    end
    if eq then ret[#ret+1]=v end
  end
  return ret
end
for k,v in ipairs(FindTransformation(Chord({}),{1,4,8},{'U','D','I'},4)) do print(v) end
