-- include cylibs
require('ugen')
require('clodule').load()
require('pattern').load()

-- instruments, samples, and FX
p=Poly{}
s=Scheduler{}
lcomp=Compressor{threshold=-30,ratio=2,attack=0.005,release=0.015}
rcomp=Compressor{threshold=-30,ratio=2,attack=0.005,release=0.015}
reverb=Reverb2{coef=0.95}
s_gabba=cybin.loadaudiofile('../samples/GABBA.AIF')
s_glitch=cybin.loadaudiofile('../samples/GLITCH.AIF')
s_glass=cybin.loadaudiofile('../samples/GLASS.AIF')
glitch=Simpler{sample=s_glitch}
s{}.delta=((240/(s_glitch.frames/s_glitch.samplerate))/120)/cybin.samplerate

-- players
function gabba(s,d,x)
  if tonumber(x) then
    p(Simpler{sample=s_gabba,pitch=tonumber(x)})
  end
end
function glass(s,d,x)
  if tonumber(x) then
    p(Simpler{sample=s_glass,pitch=math.pow(2,(x)/12),offset=0.1})
  end
end
function gltch(s,d,x)
  if tonumber(x) then
    glitch{offset=x/8,pitch=2/math.pow(2,math.random(1,3))}
  end
end

-- sequence
function counter(s,i,r) _G[s]=(r or _G[s] or 0)+(i or 1);return _G[s] end

function play()
  local len=2
  local steps=8
  local offset=len*P.GenBjorkStructure(17,{15,math.random(11,13),7,math.random(4,6),3,2,1}):WrapAt(counter('secindex'))/steps
  s{events=P('gabba 1 - - 20 - - [- 60] [1 [100 100]]'):Events(s{}.time,len,len/steps,offset)}
  s{events=P('gltch 0 - 2 [7 7 7 7] 7 [0 2] 4 5'):Events(s{}.time,len,len/steps,offset)}
  s{events=('glass'..(P('[14 7 5 2] 36 - - [- 19] - 12 -')+math.mod(math.floor(counter('fithz')/8)*5,12))):Events(s{}.time,len,len/steps,offset)}
  s{event={time=s{}.time+len/steps,func=play}}
end

-- play
play()

-- audio rate processing
function __process()
  s();
  local l,r=p()
  local c=glitch()
  l=l or 0
  r=r or 0
  c=c or 0
  local verb=reverb(l+r+c)
  c=c+verb*0.2
  return lcomp(l+c,l+r+c),rcomp(r+c,l+r+c)
end
